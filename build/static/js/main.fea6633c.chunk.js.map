{"version":3,"sources":["components/ItemCard.js","components/NewsList.js","components/SearchBar.js","components/NewsFeed.js","components/App.js","serviceWorker.js","index.js"],"names":["ItemCard","index","item","classes","useStyles","Card","className","root","variant","CardContent","Typography","component","link","href","url","title","color","by","id","fromNow","timeISO","pos","score","makeStyles","minWidth","margin","textDecoration","NewsList","news","filter","onLoadMore","scrollHandler","window","innerHeight","scrollY","document","body","offsetHeight","React","useEffect","addEventListener","removeEventListener","listToRender","length","toLowerCase","includes","map","key","SearchBar","setFilter","AppBar","position","Toolbar","toolbar","search","searchIcon","InputBase","placeholder","inputRoot","input","inputInput","inputProps","onChange","event","target","value","src","alt","theme","createStyles","display","justifyContent","backgroundColor","borderRadius","shape","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","padding","height","pointerEvents","alignItems","paddingLeft","transition","transitions","create","FEED_QUERY","gql","NewsFeed","useState","useQuery","variables","limit","offset","data","error","fetchMore","hn","newStories","updateQuery","prev","fetchMoreResult","Object","assign","uniqby","__typename","httpLink","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fea6633c.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Moment from \"react-moment\";\n\nexport const ItemCard = ({ index, item }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {index + 1}.{\" \"}\n          <a className={classes.link} href={item.url}>\n            {item.title}\n          </a>\n        </Typography>\n        <Typography color=\"textSecondary\">\n          by {item.by.id} <Moment fromNow>{item.timeISO}</Moment>\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          Points: {item.score}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    margin: \"5px\",\n  },\n  link: {\n    color: \"#e96b22\",\n    textDecoration: \"none\",\n  },\n});\n","import React from \"react\";\nimport { ItemCard } from \"./ItemCard\";\n\nexport const NewsList = ({ news, filter, onLoadMore }) => {\n  const scrollHandler = () => {\n    if (\n      window.innerHeight + window.scrollY >=\n      document.body.offsetHeight - 500\n    ) {\n      onLoadMore();\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n\n    return function cleanup() {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n\n  const listToRender = filter.length\n    ? news.filter((item) => item.title.toLowerCase().includes(filter))\n    : news;\n\n  return (\n    <div>\n      {listToRender?.map(\n        (item, index) =>\n          item && <ItemCard key={item.id} index={index} item={item}></ItemCard>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { createStyles, makeStyles, fade } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nexport const SearchBar = ({ setFilter }) => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"sticky\">\n      <Toolbar className={classes.toolbar}>\n        <div className={classes.search}>\n          <div className={classes.searchIcon}>\n            <SearchIcon />\n          </div>\n          <InputBase\n            placeholder=\"Searchâ€¦\"\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput,\n            }}\n            inputProps={{ \"aria-label\": \"search\" }}\n            onChange={(event) => setFilter(event.target.value)}\n          />\n        </div>\n        <img\n          src=\"https://kairostech.io/wp-content/uploads/2020/06/White-copy.png\"\n          alt=\"Kairos logo\"\n        />\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    toolbar: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      backgroundColor: \"#000\",\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(3),\n        width: \"auto\",\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    inputRoot: {\n      color: \"inherit\",\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"md\")]: {\n        width: \"20ch\",\n      },\n    },\n  })\n);\n","import React from \"react\";\nimport { NewsList } from \"./NewsList\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport uniqby from \"lodash.uniqby\";\nimport { SearchBar } from \"./SearchBar\";\n\nconst ITEMS_LIMIT = 30;\n\nexport const FEED_QUERY = gql`\n  query newStories($limit: Int, $offset: Int) {\n    hn {\n      newStories(limit: $limit, offset: $offset) {\n        id\n        title\n        timeISO\n        score\n        url\n        by {\n          id\n        }\n        type\n      }\n    }\n  }\n`;\n\nexport const NewsFeed = () => {\n  const [filter, setFilter] = React.useState(\"\");\n\n  const { data, error, fetchMore } = useQuery(FEED_QUERY, {\n    variables: {\n      limit: ITEMS_LIMIT,\n      offset: 0,\n    },\n  });\n\n  if (error) {\n    return <p>Error while fetching data</p>;\n  }\n\n  return data ? (\n    <>\n      <SearchBar setFilter={setFilter} />\n      <NewsList\n        filter={filter}\n        news={data.hn.newStories}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              offset: data.hn.newStories.length,\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n              if (!fetchMoreResult) {\n                return prev;\n              }\n\n              return Object.assign({}, prev, {\n                hn: {\n                  newStories: uniqby(\n                    [...prev.hn.newStories, ...fetchMoreResult.hn.newStories],\n                    \"id\"\n                  ),\n                  __typename: \"HackerNewsAPI\",\n                },\n              });\n            },\n          });\n        }}\n      />\n    </>\n  ) : (\n    <p>Loading...</p>\n  );\n};\n","import React, { Component } from \"react\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { NewsFeed } from \"./NewsFeed\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://www.graphqlhub.com/graphql\",\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <NewsFeed />\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}